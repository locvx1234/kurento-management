{
  "name": "elements",
  "version": "6.2.0",
  "kurentoVersion": "^6.1.0",
  "imports": [
    {
      "name": "core",
      "version": "^6.1.0",
      "mavenVersion": "[6.1.0,7.0.0-SNAPSHOT)",
      "npmVersion": ">=6.1.0 <7.0.0"
    }
  ],
  "code": {
    "kmd": {
      "java": {
        "mavenGroupId": "org.kurento",
        "mavenArtifactId": "kms-api-elements",
        "mavenVersion": "6.2.0"
      }
    },
    "api": {
      "java": {
        "packageName": "org.kurento.client",
        "mavenGroupId": "org.kurento",
        "mavenArtifactId": "kurento-client",
        "mavenVersion": "6.2.0"
      },
      "js": {
        "nodeName": "kurento-client-elements",
        "npmDescription": "Elements implementations for kurento media server",
        "npmGit": "Kurento/kurento-client-elements-js",
        "npmVersion": "6.2.0"
      }
    },
    "implementation": {
      "cppNamespace": "kurento",
      "lib": "libkmselements"
    }
  },
  "remoteClasses": [
    {
      "name": "DispatcherOneToMany",
      "doc": "A :rom:cls:`Hub` that sends a given source to all the connected sinks",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the dispatcher belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create a :rom:cls:`DispatcherOneToMany` belonging to the given pipeline."
      },
      "methods": [
        {
          "params": [
            {
              "name": "source",
              "doc": "source to be broadcasted",
              "type": "HubPort"
            }
          ],
          "name": "setSource",
          "doc": "Sets the source port that will be connected to the sinks of every :rom:cls:`HubPort` of the dispatcher"
        },
        {
          "params": [],
          "name": "removeSource",
          "doc": "Remove the source port and stop the media pipeline."
        }
      ]
    },
    {
      "name": "WebRtcEndpoint",
      "doc": "WebRtcEndpoint interface. This type of ``Endpoint`` offers media streaming using WebRTC.",
      "extends": "BaseRtpEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
            "type": "MediaPipeline"
          },
          {
            "name": "useDataChannels",
            "doc": "Activate data channels support",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          }
        ],
        "doc": "Builder for the :rom:cls:`WebRtcEndpoint`"
      },
      "properties": [
        {
          "name": "stunServerAddress",
          "doc": "Address of the STUN server (Only IP address are supported)",
          "type": "String"
        },
        {
          "name": "stunServerPort",
          "doc": "Port of the STUN server",
          "type": "int"
        },
        {
          "name": "turnUrl",
          "doc": "TURN server URL with this format: 'user:password@address:port(?transport=[udp|tcp|tls])'.\n'address' must be an IP (not a domain).\n'transport' is optional (UDP by default).",
          "type": "String"
        }
      ],
      "methods": [
        {
          "params": [],
          "name": "gatherCandidates",
          "doc": "Init the gathering of ICE candidates.\nIt must be called after SdpEndpoint::generateOffer or SdpEndpoint::processOffer"
        },
        {
          "params": [
            {
              "name": "candidate",
              "doc": "Remote ICE candidate",
              "type": "IceCandidate"
            }
          ],
          "name": "addIceCandidate",
          "doc": "Provide a remote ICE candidate"
        },
        {
          "params": [
            {
              "name": "label",
              "doc": "Channel's label attribute",
              "type": "String",
              "optional": true,
              "defaultValue": ""
            },
            {
              "name": "ordered",
              "doc": "If the data channel should guarantee order or not",
              "type": "boolean",
              "optional": true,
              "defaultValue": true
            },
            {
              "name": "maxPacketLifeTime",
              "doc": "the length of the time window (in milliseconds) during which transmissions and retransmissions may occur in unreliable mode",
              "type": "int",
              "optional": true,
              "defaultValue": -1
            },
            {
              "name": "maxRetransmits",
              "doc": "maximum number of retransmissions that are attempted in unreliable mode",
              "type": "int",
              "optional": true,
              "defaultValue": -1
            },
            {
              "name": "protocol",
              "doc": "the name of the sub-protocol used",
              "type": "String",
              "optional": true,
              "defaultValue": ""
            }
          ],
          "name": "createDataChannel",
          "doc": "Create a new data channel if data channel are supported"
        },
        {
          "params": [
            {
              "name": "channelId",
              "doc": "The channel identifier",
              "type": "int"
            }
          ],
          "name": "closeDataChannel",
          "doc": "Close an opened data channel"
        }
      ],
      "events": [
        "OnIceCandidate",
        "OnIceGatheringDone",
        "OnIceComponentStateChanged",
        "OnDataChannelOpened",
        "OnDataChannelClosed"
      ]
    },
    {
      "name": "HttpPostEndpoint",
      "doc": "An :rom:cls:`HttpPostEndpoint` contains SINK pads for AUDIO and VIDEO, which provide access to an HTTP file upload function\n\n   This type of endpoint provide unidirectional communications. Its :rom:cls:`MediaSources <MediaSource>` are accessed through the :term:`HTTP` POST method.",
      "extends": "HttpEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
            "type": "MediaPipeline"
          },
          {
            "name": "disconnectionTimeout",
            "doc": "This is the time that an http endpoint will wait for a reconnection, in case an HTTP connection is lost.",
            "type": "int",
            "optional": true,
            "defaultValue": 2
          },
          {
            "name": "useEncodedMedia",
            "doc": "configures the endpoint to use encoded media instead of raw media. If the parameter is not set then the element uses raw media. Changing this parameter could affect in a severe way to stability because key frames lost will not be generated. Changing the media type does not affect to the result except in the performance (just in the case where original media and target media are the same) and in the problem with the key frames. We strongly recommended not to use this parameter because correct behaviour is not guarantied.",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          }
        ],
        "doc": "Builder for the :rom:cls:`HttpPostEndpoint`."
      },
      "events": [
        "EndOfStream"
      ]
    },
    {
      "name": "HttpEndpoint",
      "doc": "Endpoint that enables Kurento to work as an HTTP server, allowing peer HTTP clients to access media.",
      "abstract": true,
      "extends": "SessionEndpoint",
      "methods": [
        {
          "params": [],
          "return": {
            "type": "String",
            "doc": "The url as a String"
          },
          "name": "getUrl",
          "doc": "Obtains the URL associated to this endpoint"
        }
      ]
    },
    {
      "name": "Mixer",
      "doc": "A :rom:cls:`Hub` that allows routing of video between arbitrary port pairs and mixing of audio among several ports",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the Mixer belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create a :rom:cls:`Mixer` belonging to the given pipeline."
      },
      "methods": [
        {
          "params": [
            {
              "name": "media",
              "doc": "The sort of media stream to be connected",
              "type": "MediaType"
            },
            {
              "name": "source",
              "doc": "Source port to be connected",
              "type": "HubPort"
            },
            {
              "name": "sink",
              "doc": "Sink port to be connected",
              "type": "HubPort"
            }
          ],
          "name": "connect",
          "doc": "Connects each corresponding :rom:enum:`MediaType` of the given source port with the sink port."
        },
        {
          "params": [
            {
              "name": "media",
              "doc": "The sort of media stream to be disconnected",
              "type": "MediaType"
            },
            {
              "name": "source",
              "doc": "Audio source port to be disconnected",
              "type": "HubPort"
            },
            {
              "name": "sink",
              "doc": "Audio sink port to be disconnected",
              "type": "HubPort"
            }
          ],
          "name": "disconnect",
          "doc": "Disonnects each corresponding :rom:enum:`MediaType` of the given source port from the sink port."
        }
      ]
    },
    {
      "name": "PlayerEndpoint",
      "doc": "Retrieves content from seekable sources in reliable\nmode (does not discard media information) and inject \nthem into :term:`KMS`. It\ncontains one :rom:cls:`MediaSource` for each media type detected.",
      "extends": "UriEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "The :rom:cls:`MediaPipeline` this PlayerEndpoint belongs to.",
            "type": "MediaPipeline"
          },
          {
            "name": "uri",
            "doc": "URI that will be played",
            "type": "String"
          },
          {
            "name": "useEncodedMedia",
            "doc": "use encoded instead of raw media. If the parameter is false then the\nelement uses raw media. Changing this parameter can affect stability\nseverely, as lost key frames lost will not be regenerated. Changing the media type does not\naffect to the result except in the performance (just in the case where\noriginal media and target media are the same) and in the problem with the\nkey frames. We strongly recommended not to use this parameter because\ncorrect behaviour is not guarantied.",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          }
        ],
        "doc": "Create a PlayerEndpoint"
      },
      "methods": [
        {
          "params": [],
          "name": "play",
          "doc": "Starts to send data to the endpoint :rom:cls:`MediaSource`"
        }
      ],
      "events": [
        "EndOfStream"
      ]
    },
    {
      "name": "AlphaBlending",
      "doc": "A :rom:cls:`Hub` that mixes the :rom:attr:`MediaType.AUDIO` stream of its connected sources and constructs one output with :rom:attr:`MediaType.VIDEO` streams of its connected sources into its sink",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the dispatcher belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create for the given pipeline"
      },
      "methods": [
        {
          "params": [
            {
              "name": "source",
              "doc": "The reference to the HubPort setting as master port",
              "type": "HubPort"
            },
            {
              "name": "zOrder",
              "doc": "The order in z to draw the master image",
              "type": "int"
            }
          ],
          "name": "setMaster",
          "doc": "Sets the source port that will be the master entry to the mixer"
        },
        {
          "params": [
            {
              "name": "relativeX",
              "doc": "The x position relative to the master port. Values from 0 to 1 are accepted. The value 0, indicates the coordinate 0 in the master image.",
              "type": "float"
            },
            {
              "name": "relativeY",
              "doc": "The y position relative to the master port. Values from 0 to 1 are accepted. The value 0, indicates the coordinate 0 in the master image.",
              "type": "float"
            },
            {
              "name": "zOrder",
              "doc": "The order in z to draw the images. The greatest value of z is in the top.",
              "type": "int"
            },
            {
              "name": "relativeWidth",
              "doc": "The image width relative to the master port width. Values from 0 to 1 are accepted.",
              "type": "float"
            },
            {
              "name": "relativeHeight",
              "doc": "The image height relative to the master port height. Values from 0 to 1 are accepted.",
              "type": "float"
            },
            {
              "name": "port",
              "doc": "The reference to the confingured port.",
              "type": "HubPort"
            }
          ],
          "name": "setPortProperties",
          "doc": "Configure the blending mode of one port."
        }
      ]
    },
    {
      "name": "RtpEndpoint",
      "doc": "Endpoint that provides bidirectional content delivery capabilities with remote networked peers through RTP protocol. An :rom:cls:`RtpEndpoint` contains paired sink and source :rom:cls:`MediaPad` for audio and video.",
      "extends": "BaseRtpEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
            "type": "MediaPipeline"
          },
          {
            "name": "crypto",
            "doc": "Crypto parameters",
            "type": "SDES",
            "optional": true,
            "defaultValue": {}
          }
        ],
        "doc": "Builder for the :rom:cls:`RtpEndpoint`"
      }
    },
    {
      "name": "RecorderEndpoint",
      "doc": "Provides function to store contents in reliable mode (doesn't discard data). It contains :rom:cls:`MediaSink` pads for audio and video.",
      "extends": "UriEndpoint",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
            "type": "MediaPipeline"
          },
          {
            "name": "uri",
            "doc": "URI where the recording will be stored",
            "type": "String"
          },
          {
            "name": "mediaProfile",
            "doc": "Choose either a :rom:attr:`MediaProfileSpecType.WEBM` or a :rom:attr:`MediaProfileSpecType.MP4` profile for recording",
            "type": "MediaProfileSpecType",
            "optional": true,
            "defaultValue": "WEBM"
          },
          {
            "name": "stopOnEndOfStream",
            "doc": "Forces the recorder endpoint to finish processing data when an :term:`EOS` is detected in the stream",
            "type": "boolean",
            "optional": true,
            "defaultValue": false
          }
        ],
        "doc": ""
      },
      "methods": [
        {
          "params": [],
          "name": "record",
          "doc": "Starts storing media received through the :rom:cls:`MediaSink` pad"
        }
      ]
    },
    {
      "name": "Dispatcher",
      "doc": "A :rom:cls:`Hub` that allows routing between arbitrary port pairs",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the dispatcher belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create a :rom:cls:`Dispatcher` belonging to the given pipeline."
      },
      "methods": [
        {
          "params": [
            {
              "name": "source",
              "doc": "Source port to be connected",
              "type": "HubPort"
            },
            {
              "name": "sink",
              "doc": "Sink port to be connected",
              "type": "HubPort"
            }
          ],
          "name": "connect",
          "doc": "Connects each corresponding :rom:enum:`MediaType` of the given source port with the sink port."
        }
      ]
    },
    {
      "name": "Composite",
      "doc": "A :rom:cls:`Hub` that mixes the :rom:attr:`MediaType.AUDIO` stream of its connected sources and constructs a grid with the :rom:attr:`MediaType.VIDEO` streams of its connected sources into its sink",
      "extends": "Hub",
      "constructor": {
        "params": [
          {
            "name": "mediaPipeline",
            "doc": "the :rom:cls:`MediaPipeline` to which the dispatcher belongs",
            "type": "MediaPipeline"
          }
        ],
        "doc": "Create for the given pipeline"
      }
    }
  ],
  "complexTypes": [
    {
      "typeFormat": "REGISTER",
      "properties": [
        {
          "name": "candidate",
          "doc": "The candidate-attribute as defined in section 15.1 of ICE (rfc5245).",
          "type": "String"
        },
        {
          "name": "sdpMid",
          "doc": "If present, this contains the identifier of the 'media stream identification'.",
          "type": "String"
        },
        {
          "name": "sdpMLineIndex",
          "doc": "The index (starting at zero) of the m-line in the SDP this candidate is associated with.",
          "type": "int"
        }
      ],
      "name": "IceCandidate",
      "doc": "IceCandidate representation based on standard (http://www.w3.org/TR/webrtc/#rtcicecandidate-type)."
    },
    {
      "typeFormat": "ENUM",
      "values": [
        "DISCONNECTED",
        "GATHERING",
        "CONNECTING",
        "CONNECTED",
        "READY",
        "FAILED"
      ],
      "name": "IceComponentState",
      "doc": "States of an ICE component."
    },
    {
      "typeFormat": "ENUM",
      "values": [
        "WEBM",
        "MP4",
        "WEBM_VIDEO_ONLY",
        "WEBM_AUDIO_ONLY",
        "MP4_VIDEO_ONLY",
        "MP4_AUDIO_ONLY"
      ],
      "name": "MediaProfileSpecType",
      "doc": "Media Profile.\n\nCurrently WEBM and MP4 are supported."
    },
    {
      "typeFormat": "ENUM",
      "values": [
        "AES_128_CM_HMAC_SHA1_32",
        "AES_128_CM_HMAC_SHA1_80",
        "AES_256_CM_HMAC_SHA1_32",
        "AES_256_CM_HMAC_SHA1_80"
      ],
      "name": "CryptoSuite",
      "doc": "Describes the encryption and authentication algorithms"
    },
    {
      "typeFormat": "REGISTER",
      "properties": [
        {
          "name": "key",
          "doc": "The cryptographic master key. It should be 30 bytes length when AES_128_CM cipher is used or 46 bytes length for AES_256_CM cipher), If no key is provided a random one will be used",
          "type": "String",
          "optional": true
        },
        {
          "name": "crypto",
          "doc": "The crypto-suite used",
          "type": "CryptoSuite",
          "optional": true
        }
      ],
      "name": "SDES",
      "doc": "Security Descriptions for Media Streams"
    }
  ],
  "events": [
    {
      "properties": [
        {
          "name": "candidate",
          "doc": "New gathered local candidate",
          "type": "IceCandidate"
        }
      ],
      "extends": "Media",
      "name": "OnIceCandidate",
      "doc": "Notify of a new gathered local candidate."
    },
    {
      "properties": [],
      "extends": "Media",
      "name": "OnIceGatheringDone",
      "doc": "Notify that all candidates have been gathered."
    },
    {
      "properties": [
        {
          "name": "streamId",
          "doc": "The ID of the stream",
          "type": "int"
        },
        {
          "name": "componentId",
          "doc": "The ID of the component",
          "type": "int"
        },
        {
          "name": "state",
          "doc": "The state of the component",
          "type": "IceComponentState"
        }
      ],
      "extends": "Media",
      "name": "OnIceComponentStateChanged",
      "doc": "Notify about the change of an ICE component state."
    },
    {
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ],
      "extends": "Media",
      "name": "OnDataChannelOpened",
      "doc": "Notify the creation of a new data channel."
    },
    {
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ],
      "extends": "Media",
      "name": "OnDataChannelClosed",
      "doc": "Notify the destruction of a data channel."
    },
    {
      "properties": [],
      "extends": "Media",
      "name": "EndOfStream",
      "doc": "Event raised when the stream that the element sends out is finished."
    }
  ]
}
